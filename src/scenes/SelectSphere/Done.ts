import { reply, enumerate, tts } from 'alice-renderer';
import { Component } from '../Component';
import { SphereTitleMany, Sphere } from '../../events/v4';
import { NextFilterOrEvent } from '../Utils/NextFilterOrEvent';

const sphereRegexp: Record<Sphere, RegExp> = {
  [Sphere.Spectacle]: /—Å–ø–µ–∫—Ç–∞–∫–ª/,
  [Sphere.Exibition]: /–≤—ã—Å—Ç–∞–≤–∫/,
  [Sphere.Excursion]: /—ç–∫—Å–∫—É—Ä—Å–∏/,
  [Sphere.MasterClass]: /–º–∞—Å—Ç–µ—Ä/,
  [Sphere.Park]: /–ø–∞—Ä–∫|—Å–≤–µ–∂|–≤–æ–∑–¥—É—Ö/,
  [Sphere.Sport]: /—Å–ø–æ—Ä—Ç/,
};

export class Done extends Component {
  nextComponent = NextFilterOrEvent;
  forChildren?: boolean;
  matchedSpheres: Sphere[] = [];

  match() {
    return [ this.matchChildren(), this.matchSphere() ].some(Boolean);
  }

  matchChildren() {
    delete this.ctx.filter.data.forChildren;
    if (this.matchRegexp(/–¥–µ—Ç[–µ–π|–∏]|–¥–µ—Ç—å–º–∏|–¥–µ—Ç—Å–∫–∏/)) {
      this.forChildren = true;
      this.ctx.filter.data.forChildren = true;
      return true;
    }
  }

  matchSphere() {
    for (const key of Object.keys(sphereRegexp) as unknown as Sphere[]) {
      const regexp = sphereRegexp[key];
      if (this.matchRegexp(regexp)) {
        const sphereId = Number(key);
        this.ctx.filter.data.spheres = this.ctx.filter.data.spheres.concat([ sphereId ]);
        this.matchedSpheres.push(sphereId);
      }
    }

    if (this.matchedSpheres.length > 0) {
      // –ø–æ–∫–∞ –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ñ–µ—Ä—ã
      this.ctx.filter.data.spheres = this.matchedSpheres;
      return true;
    }
  }

  reply() {
    return this.matchedAsDefault
      ? this.replyNoSelection()
      : this.replyHasSelection();
  }

  replyHasSelection() {
    return reply`
      üëå
      ${this.getSound()}
      ${this.getMsg()}
    `;
  }

  getMsg() {
    const titles = [
      ...this.matchedSpheres.map(sphereId => SphereTitleMany[sphereId]),
      this.ctx.filter.data.forChildren ? '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –¥–µ—Ç–µ–π' : '',
    ];
    const titlesStr = enumerate(titles, { lastSeparator: ' –∏ ' });
    return [
      `–ü–æ–Ω—è–ª–∞! –ü–æ–¥—ã—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ ${titlesStr}.`,
      `–ü—Ä–∏–Ω—è—Ç–æ. –°–º–æ—Ç—Ä—é –∏–º–µ–Ω–Ω–æ ${titlesStr}!`,
      `–û–∫–µ–π! –ë—É–¥—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ ${titlesStr}!`,
      `–û–∫! –ò—â—É ${titlesStr}.`,
    ];
  }

  getSound() {
    if (this.forChildren) {
      return tts(this.sounds.tts.children);
    } else if (this.matchedSpheres.includes(Sphere.Park)) {
      return tts(this.sounds.tts.forest);
    }
  }

  replyNoSelection() {
    return reply`
      üôå
      –¢–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–∂–µ –ø–æ–¥–æ–π–¥–µ—Ç!
    `;
  }
}

